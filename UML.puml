@startuml
class app.SourceCode.DataStructure.TrieNode {
+ TrieNode[] children
- boolean isEndOfWord
- List<Word> words
+ <<Create>> TrieNode()
+ TrieNode getChild(char)
+ void setChild(char,TrieNode)
+ boolean isEndOfWord()
+ void setEndOfWord(boolean)
+ List<Word> getWords()
+ void addWord(Word)
}


class app.SourceCode.Fundamental.Dictionary {
- {static} Trie trie
+ {static} Trie getTrie()
+ {static} void setTrie(Trie)
}


class app.SourceCode.FileActivities.ReadFromFile {
+ {static} List<Word> readTXT(String)
+ {static} List<Word> readSQL()
}

class app.SourceCode.Fundamental.Word {
- String word_target
- String word_explain
+ <<Create>> Word()
+ <<Create>> Word(String,String)
+ String getWord_target()
+ void setWord_target(String)
+ String getWord_explain()
+ void setWord_explain(String)
}


class app.SourceCode.Fundamental.TextToSpeech {
- {static} String VOICES_KEY
- {static} String VOICE_VALUE
- {static} String CENTRAL_DATA
- {static} ExecutorService executorService
+ {static} void voice(String)
}


class app.SourceCode.FileActivities.InitDictionary {
~ DictionaryManagement dictionaryInit
+ <<Create>> InitDictionary()
+ <<Create>> InitDictionary(String)
+ {static} List<Word> search(String)
}


class app.SourceCode.FileActivities.WriteToFile {
+ {static} void writeTXT(String)
+ {static} void writeTXT(String,String)
}

class app.SourceCode.Fundamental.DictionaryCommandLine {
# DictionaryManagement dictionaryManagement
+ void showAllWord()
+ void dictionaryBasic()
+ List<Word> dictionarySearcher(String)
}


class app.SourceCode.Fundamental.GoogleTransAPI {
- {static} String TRANSLATE_URL
+ {static} String translate(String,String,String)
- {static} String parseTranslation(String)
}


class app.SourceCode.Fundamental.DictionaryManagement {
+ void insertFromCommandline()
+ void insertFromFile_txt(String)
+ void insertFromFile_sql()
+ List<Word> dictionaryLookup(String)
+ void addWord(Word)
+ void addTrie(Trie)
+ void editWord(Word,Word)
+ void removeWord(Word)
}

class app.SourceCode.DataStructure.Trie {
- TrieNode root
+ <<Create>> Trie()
+ void insert(Word)
+ void insert(List<Word>)
+ List<Word> search(String)
- void collectWords(TrieNode,List<Word>)
+ void delete(Word)
- boolean delete(TrieNode,String,int)
+ void edit(Word,Word)
+ void merge(Trie)
- void mergeTrieNodes(TrieNode,TrieNode)
+ List<Word> printAllWords()
}




app.SourceCode.Fundamental.DictionaryManagement <|-- app.SourceCode.FileActivities.InitDictionary
app.SourceCode.Fundamental.Dictionary <|-- app.SourceCode.Fundamental.DictionaryCommandLine
app.SourceCode.Fundamental.Dictionary <|-- app.SourceCode.Fundamental.DictionaryManagement
@enduml